{"version":3,"sources":["TodoForm.js","Todo.js","EditableTodo.js","EditableTodoList.js","TopTodo.js","TodoApp.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["defaultInitialFormData","title","description","priority","TodoForm","initialFormData","handleSave","useState","formData","setFormData","handleChange","evt","input","target","name","value","className","onSubmit","preventDefault","id","placeholder","onChange","aria-label","htmlFor","Todo","todo","EditableTodo","remove","update","isEditing","setIsEditing","onClick","edit","EditableTodoList","todos","map","key","TopTodo","length","top","reduce","acc","cur","TodoApp","initialTodos","setTodos","updatedTodo","filter","newTodo","uuid","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.35aeb9aa.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\n\n/** Form for adding.\n *\n * Props:\n * - initialFormData\n * - handleSave: function to call in parent.\n *\n * { TodoApp, EditableTodo } -> TodoForm\n */\n\nconst defaultInitialFormData = { title: \"\", description: \"\", priority: 1 };\n\nfunction TodoForm({ initialFormData = defaultInitialFormData, handleSave }) {\n  const [formData, setFormData] = useState(initialFormData);\n\n  /** Update form input. */\n  function handleChange(evt) {\n    const input = evt.target;\n    setFormData(formData => ({\n      ...formData,\n      [input.name]: input.value,\n    }));\n  }\n\n  /** Call parent function and clear form. */\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    handleSave(formData);\n    setFormData(initialFormData);\n  }\n\n  return (\n      <form className=\"NewTodoForm\" onSubmit={handleSubmit}>\n\n        <div className=\"form-group\">\n          <input\n              id=\"newTodo-title\"\n              name=\"title\"\n              className=\"form-control\"\n              placeholder=\"Title\"\n              onChange={handleChange}\n              value={formData.title}\n              aria-label=\"Title\"\n          />\n        </div>\n\n        <div className=\"form-group\">\n          <textarea\n              id=\"newTodo-description\"\n              name=\"description\"\n              className=\"form-control\"\n              placeholder=\"Description\"\n              onChange={handleChange}\n              value={formData.description}\n              aria-label=\"Description\"\n          />\n        </div>\n\n        <div className=\"form-group d-flex justify-content-between\">\n          <div className=\"w-75 d-flex justify-content-between\">\n            <label htmlFor=\"newTodo-priority\"\n                   className=\"d-inline-flex\">Priority:&nbsp;&nbsp;\n            </label>\n            <select id=\"newTodo-priority\"\n                    name=\"priority\"\n                    value={formData.priority}\n                    onChange={handleChange}\n                    className=\"form-control form-control-sm d-inline-flex\"\n            >\n              <option value={1}>Ultra-Über</option>\n              <option value={2}>Über</option>\n              <option value={3}>Meh</option>\n            </select>\n          </div>\n          <button className=\"btn-primary rig btn btn-sm NewTodoForm-addBtn\">\n            Gø!\n          </button>\n        </div>\n\n      </form>\n  );\n}\n\nexport default TodoForm;\n","import React from \"react\";\n\n/** Simple presentation component for a todo.\n *\n * Props:\n * - todo: like { id, title, description, priority }\n *\n * { EditableTodo, TodoApp } -> Todo\n **/\n\nfunction Todo({ todo }) {\n  return (\n      <div className=\"Todo\">\n        <div><b>{todo.title}</b> <small>(priority: {todo.priority})</small></div>\n        <div><small>{todo.description}</small></div>\n      </div>\n  );\n}\n\nexport default Todo;\n","import React, { useState } from \"react\";\nimport Todo from \"./Todo\";\nimport TodoForm from \"./TodoForm\";\n\n/** Show editable todo item.\n *\n * Props\n * - todo\n * - update(): fn to call to update a todo\n * - remove(): fn to call to remove a todo\n *\n * EditableTodoList -> EditableTodo -> { Todo, TodoForm }\n */\n\nfunction EditableTodo({ todo, remove, update }) {\n  const [isEditing, setIsEditing] = useState(false);\n\n  /** Toggle if this is being edited */\n  function toggleEdit() {\n    setIsEditing(edit => !edit);\n  }\n\n  /** Call remove fn passed to this. */\n  function handleDelete() {\n    return remove(todo.id);\n  }\n\n  /** Edit form saved; toggle isEditing and update in ancestor. */\n  function handleSave(formData) {\n    update({ id: todo.id, ...formData});\n    setIsEditing(false);\n  }\n\n  return (\n      <div className=\"EditableTodo\">\n        {isEditing\n            ? (\n                <TodoForm\n                    initialFormData={ todo }\n                    handleSave={handleSave} />\n            ) : (\n                <div className=\"mb-3\">\n                  <div className=\"float-right text-sm-right\">\n                    <button\n                        className=\"EditableTodo-toggle btn-link btn btn-sm\"\n                        onClick={toggleEdit}>\n                      Edit\n                    </button>\n                    <button\n                        className=\"EditableTodo-delBtn btn-link btn btn-sm text-danger\"\n                        onClick={handleDelete}>\n                      Del\n                    </button>\n                  </div>\n                  <Todo todo={todo} />\n                </div>\n            )\n        }\n      </div>\n  );\n}\n\nexport default EditableTodo;\n","import React from \"react\";\nimport EditableTodo from \"./EditableTodo\";\n\n/** Show list of editable todos.\n *\n * Props:\n * - todos: array of [ todo, ... ]\n * - update(): fn to call to update a todo\n * - remove(): fn to call to remove a todo\n *\n * TodoApp -> EditableTodoList -> [ EditableTodo, ... ]\n */\n\nfunction EditableTodoList({ todos, update, remove }) {\n  return todos.map(todo => (\n      <EditableTodo\n          key={todo.id}\n          todo={todo}\n          update={update}\n          remove={remove}\n      />\n  ));\n}\n\nexport default EditableTodoList;\n","import React from \"react\";\n\nimport Todo from \"./Todo\";\n\n/** Shows the top todo.\n *\n * Props:\n * - todos\n *\n * TodoApp -> TopTodo\n */\n\nfunction TopTodo({ todos }) {\n  if (todos.length === 0) return null;\n\n  // lowest-priority # is the highest priority\n  let top = todos.reduce(\n      (acc, cur) => cur.priority < acc.priority ? cur : acc, todos[0]);\n\n  return <Todo todo={top} />;\n}\n\nexport default TopTodo;","import React, { useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\n\nimport TodoForm from \"./TodoForm\";\nimport EditableTodoList from \"./EditableTodoList\";\nimport TopTodo from \"./TopTodo\";\n\n/** App for managing a todo list.\n *\n * Props:\n * - initialTodos: possible array of [ todo, ... ]\n *\n * State:\n * - todos: array of [ todo, ... ]\n *\n * App -> TodoApp -> { TodoForm, EditableTodoList }\n */\n\nfunction TodoApp({ initialTodos }) {\n  const [todos, setTodos] = useState(initialTodos);\n\n  /** add a new todo to list */\n  function create(newTodo) {\n    setTodos(todos => [...todos, { id: uuid(), ...newTodo }]);\n  }\n\n  /** update a todo with updatedTodo */\n  function update(updatedTodo) {\n    setTodos(todos =>\n        todos.map(todo =>\n            todo.id === updatedTodo.id ? updatedTodo : todo,\n        ),\n    );\n  }\n\n  /** delete a todo by id */\n  function remove(id) {\n    setTodos(todos => todos.filter(todo => todo.id !== id));\n  }\n\n  return (\n      <main className=\"TodoApp\">\n        <div className=\"row\">\n\n          <div className=\"col-md-6\">\n            <h3 className=\"mb-3\">Todos</h3>\n            {todos.length > 0\n                ? <EditableTodoList\n                    todos={todos}\n                    update={update}\n                    remove={remove} />\n                : <span className=\"text-muted\">You have no todos.</span>}\n          </div>\n\n          <div className=\"col-md-6\">\n            {todos.length > 0 && (\n                <section className=\"mb-4\">\n                  <h3 className=\"mb-3\">Top Todo</h3>\n                  <TopTodo todos={todos} />\n                </section>\n            )}\n\n            <section>\n              <h3 className=\"mb-3\">Add Nü</h3>\n              <TodoForm handleSave={create} />\n            </section>\n          </div>\n\n        </div>\n      </main>\n  );\n}\n\nexport default TodoApp;","import React from 'react';\n\n/** Site-wide footer for Flüffy Data Enterprises, Inc. */\n\nfunction Footer() {\n  return (\n      <footer className=\"App-footer mt-5 text-muted\">\n        <small>\n          Prødutïv is copyright ©2020 by Flüffy Data Enterprises, Inc.\n        </small>\n      </footer>\n  )\n}\n\nexport default Footer;","import React from \"react\";\nimport TodoApp from \"./TodoApp\";\nimport Footer from \"./Footer\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\n/** Site application.\n *\n * App -> TodoApp\n **/\n\nfunction App() {\n  return (\n      <main className=\"App\">\n        <header className=\"container=fluid pt-4 pb-1\">\n          <div className=\"container\">\n            <h1>Prøductïv</h1>\n            <p className=\"lead\">The best name in todo list management.</p>\n          </div>\n        </header>\n\n        <section className=\"container mt-4\">\n          <TodoApp initialTodos={[\n            {\n              id: 1,\n              title: \"Code!\",\n              description: \"Write some code\",\n              priority: 2,\n            },\n            {\n              id: 2,\n              title: \"Make dinner\",\n              description: \"Cook something healthy\",\n              priority: 1,\n            },\n            {\n              id: 3,\n              title: \"Go to bed\",\n              description: \"In bed by 11:15\",\n              priority: 3,\n            },\n          ]} />\n\n          <Footer />\n        </section>\n      </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}